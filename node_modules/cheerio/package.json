{
  "author": {
    "name": "Matt Mueller",
    "email": "mattmuelle@gmail.com",
    "url": "mattmueller.me"
  },
  "name": "cheerio",
  "description": "Tiny, fast, and elegant implementation of core jQuery designed specifically for the server",
  "version": "0.0.3",
  "repository": {
    "url": ""
  },
  "main": "./index.js",
  "engines": {
    "node": ">= 0.4.11"
  },
  "dependencies": {
    "soupselect": "0.2.x",
    "htmlparser": "1.x"
  },
  "devDependencies": {
    "coffee-script": "1.1.x",
    "vows": "0.5.x",
    "diff_match_patch": "0.1.x"
  },
  "readme": "# cheerio\n\nTiny, fast, and elegant implementation of core jQuery designed specifically for the server. \n\n## Introduction\nTeach your server HTML.\n\n    var cheerio = require(\"cheerio\"),\n        $ = cheerio.load(\"<h2 class = 'title'>Hello world</h2>\")\n  \n    $('h2.title').text('Hello there!')\n    $('h2').addClass('welcome')\n\n    $.html() \n    => <h2 class = \"title welcome\">Hello there!</h2>\n\n\n## Installation\n`npm install cheerio`\n\n... or to install the package globally:\n\n`npm install -g cheerio`\n\n## Features\n__&#10084; Familiar syntax:__\nCheerio implements a subset of core jQuery. Cheerio removes all the DOM inconsistencies and browser cruft from the jQuery library, revealing a truly gorgeous API. \n\n__&#991; Blazingly fast:__\nCheerio works with a very simple, consistent DOM model. As a result parsing, manipulating, and rendering are incredibly efficient. Preliminary end-to-end benchmarks suggest that cheerio is about 8x faster than JSDOM.\n\n__&#10049; Insanely flexible:__\nCheerio wraps around @tautologistics forgiving htmlparser. Cheerio can parse nearly any page or chunk of html or xml.\n\n## What about JSDOM?\nI wrote cheerio because I found myself increasingly frustrated with JSDOM. For me, there were three main sticking points that I kept running into again and again:\n\n__&#8226; JSDOM's built-in parser is too strict:__\n  JSDOM's bundled HTML parser cannot handle many popular sites out there today.\n\n__&#8226; JSDOM is too slow:__\nParsing big websites with JSDOM has a noticeable delay.\n\n__&#8226; JSDOM feels too heavy:__\nThe goal of JSDOM is to provide an identical DOM environment as what we see in the browser. I never really needed all this, I just wanted a simple, familiar way to do HTML manipulation.\n\n## API\n\n### Markup example we'll be using:\nThis is the HTML markup we will be selecting, traversing, and manipulating in all of the API examples.\n\n    <ul id = \"fruits\">\n      <li class = \"apple\">Apple</li>\n      <li class = \"orange\">Orange</li>\n      <li class = \"pear\">Pear</li>\n    </ul>\n\n\n\n### Loading\nFirst you need to load in the HTML. This step in jQuery is implicit, since jQuery operates on the one, baked-in DOM. With Cheerio, we need to pass in the HTML document. \n\nThis is the preferred method:\n    \n    var cheerio = require('cheerio'),\n        $ = cheerio.load( '<ul id = \"fruits\">...</ul>' )\n\nOptionally, you can also load in the HTML by passing the string as the context:\n\n    $ = require('cheerio')\n    $('ul', '<ul id = \"fruits\">...</ul>')\n\nOr as the root:\n\n    $ = require('cheerio')\n    $('li', 'ul', '<ul id = \"fruits\">...</ul>')\n### Selectors\n\nCheerio's selector implementation is nearly identical to jQuery's, so the API is very similar.\n\n#### $( selector, [context], [root] )\n`selector` searches within the `context` scope which searches within the `root` scope. `selector` and `context` can be an string expression, DOM Element, array of DOM elements, or cheerio object. `root` is typically the HTML document string. \n\nThis selector method is the starting point for traversing and manipulating the document. Like jQuery, it's the primary method for selecting elements in the document, but unlike jQuery it's built on top of the soup-select library, not the Sizzle engine. \n\n__Examples:__\n\n    $(\".apple\", '#fruits').text()\n    => Apple\n  \n    $('ul .pear').attr('class')\n    => pear\n  \n    $('li[class=orange]').html()\n    => <li class = \"orange\">Orange</li>\n\n\n> See http://api.jquery.com/jQuery/ for more information\n\n### Attributes\nMethods for getting and modifying attributes.\n\n#### .attr( name, value )\nMethod for getting and setting attributes. May also use a `map` and `function` like jQuery. Gets the attribute value for only the first element in the matched set. If you set an attribute's value to `null`, you remove that attribute.\n\n    $('ul').attr('id')\n    => fruits\n\n    $('.apple').attr('id', 'favorite').html()\n    => <li class = \"apple\" id = \"favorite\">Apple</li>\n\n> See http://api.jquery.com/attr/ for more information\n\n#### .removeAttr( name )\nMethod for removing attributes by `name`.\n\n    $('.pear').removeAttr('class').html()\n    => <li>Pear</li>\n\n#### .hasClass( className )\nCheck to see if *any* of the matched elements have a given `className`.\n\n    $('.pear').hasClass('pear')\n    => true\n\n    $('apple').hasClass('fruit')\n    => false\n\n    $('li').hasClass('pear')\n    => true\n  \n#### addClass( className )\nAdds class(es) to all of the matched elements. Also accepts a `function` like jQuery.\n\n    $('.pear').addClass('fruit').html()\n    => <li class = \"pear fruit\">Pear</li>\n\n    $('.apple').addClass('fruit red').html()\n    => <li class = \"apple fruit red\">Apple</li>\n\n> See http://api.jquery.com/addClass/ for more information.\n\n#### removeClass( [className] )\nRemoves one or more space-separated classes from the selected elements. If no `className` is defined, all classes will be removed. Also accepts a `function` like jQuery.\n\n    $('.pear').removeClass('pear').html()\n    => <li class = \"\">Pear</li>\n\n    $('.apple').addClass('red').removeClass().html()\n    => <li class = \"\">Apple</li>\n    \n> See http://api.jquery.com/removeClass/ for more information.\n\n\n### Traversing\n\n#### .parent()\nGets the parent of the first selected element.\n\n    $('.pear').parent().attr('id')\n    => fruits\n\n#### .next()\nGets the next sibling thats an element of the first selected element.\n\n    $('.apple').next().hasClass('orange')\n    => true\n    \n#### .prev()\nGets the previous sibling thats an element of the first selected element.\n\n    $('.orange').prev().hasClass('apple')\n    => true\n\n#### .siblings()\nGets the first selected element's siblings. Excludes itself.\n\n    $('.pear').siblings().length\n    => 2\n    \n#### .children()\nGets the children of the first selected element.\n\n    $('#fruits').children().length\n    => 3\n\n#### .each( function(index, element) )\nIterates over a cheerio object, executing a function for each matched element. When the callback is fired, the function is fired in the context of the DOM element, so `this` refers to the current element, same as `element`.\n\n    var fruits = [];\n    \n    $('li').each(function(i, elem) {\n      fruits[i] = $(this).text();\n    });\n    \n    fruits.join(', ');\n    => Apple, Orange, Pear\n\n\n### Manipulation\nMethods for modifying the DOM structure.\n\n#### .append( content, [content, ...] )\nInserts content as the *last* child of each of the selected elements.\n\n    $('ul').append('<li class = \"plum\">Plum</li>')\n    $.html()\n    =>  <ul id = \"fruits\">\n          <li class = \"apple\">Apple</li>\n          <li class = \"orange\">Orange</li>\n          <li class = \"pear\">Pear</li>\n          <li class = \"plum\">Plum</li>\n        </ul>\n\n#### .prepend( content, [content, ...] )\nInserts content as the *first* child of each of the selected elements.\n\n    $('ul').prepend('<li class = \"plum\">Plum</li>')\n    $.html()\n    =>  <ul id = \"fruits\">\n          <li class = \"plum\">Plum</li>\n          <li class = \"apple\">Apple</li>\n          <li class = \"orange\">Orange</li>\n          <li class = \"pear\">Pear</li>\n        </ul>\n        \n#### .after( content, [content, ...] )\nInsert content next to each element in the set of matched elements. \n\n    $('.apple').after('<li class = \"plum\">Plum</li>')\n    $.html()\n    =>  <ul id = \"fruits\">\n          <li class = \"apple\">Apple</li>\n          <li class = \"plum\">Plum</li>\n          <li class = \"orange\">Orange</li>\n          <li class = \"pear\">Pear</li>\n        </ul>\n        \n#### .before( content, [content, ...] )\nInsert content previous to each element in the set of matched elements. \n\n    $('.apple').before('<li class = \"plum\">Plum</li>')\n    $.html()\n    =>  <ul id = \"fruits\">\n          <li class = \"plum\">Plum</li>\n          <li class = \"apple\">Apple</li>\n          <li class = \"orange\">Orange</li>\n          <li class = \"pear\">Pear</li>\n        </ul>\n\n#### .remove( [selector] )\nRemoves the set of matched elements from the DOM and all their children. `selector` filters the set of matched elements to be removed.\n\n    $('.pear').remove()\n    $.html()\n    =>  <ul id = \"fruits\">\n          <li class = \"plum\">Plum</li>\n          <li class = \"apple\">Apple</li>\n          <li class = \"orange\">Orange</li>\n        </ul>\n        \n#### .empty()\nEmpties an element, removing all it's children.\n\n    $('ul').empty()\n    $.html()\n    =>  <ul id = \"fruits\"></ul>\n    \n#### .html( [htmlString] )\nGets an html content string from the first selected element. If `htmlString` is specified, each selected element's content is replaced by the new content.\n\n    $('.orange').html()\n    => <li class = \"orange\">Orange</li>\n    \n    $('ul#fruits').html('<li class = \"mango\">Mango</li>').html()\n    =>  <ul id=\"fruits\">\n          <li class=\"mango\">Mango</li>\n        </ul>\n        \n#### .text( [textString] )\nGet the combined text contents of each element in the set of matched elements, including their descendants.. If `textString` is specified, each selected element's content is replaced by the new text content.\n\n    $('.orange').text()\n    => Orange\n    \n    $('ul').text()\n    =>  Apple\n        Orange\n        Pear\n\n### Rendering\nWhen you're ready to render the document, you can use `html` utility function:\n\n    $.html()\n    =>  <ul id = \"fruits\">\n          <li class = \"apple\">Apple</li>\n          <li class = \"orange\">Orange</li>\n          <li class = \"pear\">Pear</li>\n        </ul>\n\nIf you want to render just a piece of the document you can use selectors:\n\n    $('.pear').html()\n    => <li class = \"pear\">Pear</li>\n### Miscellaneous \nDOM element methods that don't fit anywhere else\n\n#### .get( [index] )\nRetrieve the DOM elements matched by the cheerio object. If no index is specified, it will get an array of all matched elements.\n\n    $('li').get(0)\n    => { raw: 'li class=\"apple\"', ... }\n    \n    $('li').get()\n    => [ {...}, {...}, {...} ]\n    \n#### .size()\nReturn the number of elements in the cheerio object. Same as `length`.\n\n    $('li').size()\n    => 3\n    \n#### .toArray()\nRetrieve all the DOM elements contained in the jQuery set, as an array.\n\n    $('li').toArray()\n    => [ {...}, {...}, {...} ]\n### Utilities\n\n#### $.dom()\nGet the raw DOM of the parsed HTML document.\n\n    $.dom()\n    => [ { raw: 'ul id=\"fruits\"',\n        data: 'ul id=\"fruits\"',\n        type: 'tag',\n        name: 'ul',\n        attribs: { id: 'fruits' },\n        children: \n         [ [Object],\n           [Object],\n           [Object],\n           [Object],\n           [Object],\n           [Object],\n           [Object] ],\n        parent: null,\n        prev: null,\n        next: null } ]\n\n#### $.isArray( array )\nChecks to see the passed argument is an array.\n\n    $.isArray( $.dom() )\n    => true\n\n#### $.inArray( elem, arr )\nChecks to see if the element is in the array\n\n#### $.makeArray( obj )\nTurns an array-like object (like $) into a native array.\n    \n#### $.each( obj, function(index, elem) )\nGeneric iterator function.\n\n#### $.merge( one, two )\nMerge the contents of two arrays together into the first array.\n\n\n## Special Thanks\n\nThis library stands on the shoulders of some incredible developers. A special thanks to:\n\n__&#8226; @tautologistics' node-htmlparser:__\nThis HTML parser can parse anything! The parser produces really consistent results, even when the HTML string has errors. This man is a genius.\n \n__&#8226; @harryf's node-soupselect:__ \nWhat an incredibly fast and precise CSS selector engine. Never really liked the feature-rich selector engines – this engine strikes a great balance.\n\n__&#8226; @jQuery team:__\nThe core API is the best of it's class and despite dealing with all the browser inconsistencies the code base is extremely clean and easy to follow. Much of cheerio's implementation and documentation is from jQuery. Thanks guys.\n\n__&#8226; @visionmedia:__\nThe style, the structure, the open-source\"-ness\" of this library comes from studying TJ's style and using many of his libraries. This dude consistently pumps out high-quality libraries and has always been more than willing to help or answer questions. You rock TJ.\n## License \n\n(The MIT License)\n\nCopyright (c) 2011 Matt Mueller &lt;mattmuelle@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "Readme.md",
  "_id": "cheerio@0.0.3",
  "dist": {
    "shasum": "f00c7348746ede4814975aea11d970555efd3e38"
  },
  "_from": "cheerio@0.0.3",
  "_resolved": "https://registry.npmjs.org/cheerio/-/cheerio-0.0.3.tgz"
}
