validation utility:
- filters should be able to handle whatever a user could put (or not put) in an input field, so preeeetty much anything.
- validate functions intentionally don't allow returning arrays of errors, because the error messages are intended to be displayed on a field-by-field
  basis (not one big list for the whole form).


- A contact must have at least one entry in its 'names' OR one entry in its 'emails'
  - tighter constraint: email required is being enforced in the frontend now

- search frontend features
  - esc and losing focus closes results
  - clicking a tag name starts a search for that tab
  - arrow keys move between results
  - clicking (or pressing enter if using arrow keys)
- search backend features
  - multiple terms, space delimited
  - prefix search term with type (eg., 'tag:')
  - no duplicates in results

- lots of bindings stuff only SEEMS to work because the model data happens to be loaded already. Notable places this happens are the activity
  feed implicitly loading a few contacts and the search box loading many more
- you must use an object, not an id, when making a belongsTo relationship



i.icon-star(style='position: relative; top: -38px; left: 55px; color: #e51937')



###
#
# notes:
# this google contacts api picks out name and email:
# need to do something to get image url
#
# even then, it's another api call, which allows us to download data.
# do we wanna store images locally?

GoogleContacts = require('Google-Contacts').GoogleContacts;
c = new GoogleContacts
  token: user.oauth.accessToken
  refreshToken: user.oauth.refreshToken
  consumerKey: process.env.GOOGLE_API_ID
  consumerSecret: process.env.GOOGLE_API_SECRET

c.on 'error', (e) ->
    console.log('Google Contacts error: ', e);

c.on 'contactsReceived', (contacts) ->
    console.log 'contacts: '
    console.dir contacts

try
  c.getContacts (err, contacts) ->
    if err then console.log "error #{err}"
    console.dir contacts
catch e
  console.log "getContacts error #{e}"

###